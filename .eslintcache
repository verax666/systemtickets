[{"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\index.js":"1","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\reportWebVitals.js":"2","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\App.js":"3","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\navBar.js":"4","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\ReportsTable\\reportsTable.js":"5","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\FullReport\\fullReport.js":"6","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\newReport.js":"7","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\InterfaceDialog\\interfaceDialog.js":"8","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\Alerts\\Alerts.js":"9","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Home\\home.js":"10","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginClient\\loginClient.js":"11","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Admin\\admin.js":"12","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginEmployes\\loginEmployes.js":"13","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginEmployes\\loginEmployescss.js":"14","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\Cotizador.js":"15","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorTable\\CotizadorTable.js":"16","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorAdmin\\cotizadorAdmin.js":"17","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\sidebar\\sidebar.js":"18","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorClient\\cotizadorclient.js":"19","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Description_Helper\\Des_Helper.js":"20","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Description_Helper\\Des_helper_css.js":"21","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\Axios\\Config.js":"22","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\contexts\\contextRoutes.js":"23","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateadmin\\privateAdmin.js":"24","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateHelper\\privateHelper.js":"25","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Faq_View\\Faqs_View.js":"26","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Faq_View\\Faqs\\Faqs.js":"27","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\navBar_css.js":"28","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\axios\\Config.js":"29","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\FullReport\\fullReport.css.js":"30","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\newReport_css.js":"31","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateLogin\\privateLogin.js":"32","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Tickets.service.js":"33","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Clients\\Client.service.js":"34","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Procesos\\Process.service.js":"35","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\StatusCatalog\\Status.service.js":"36","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\validateClient.js":"37","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Helper\\faqView.js":"38","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Comments\\comment.service.js":"39"},{"size":455,"mtime":1611332720144,"results":"40","hashOfConfig":"41"},{"size":362,"mtime":499162500000,"results":"42","hashOfConfig":"41"},{"size":2419,"mtime":1614267070353,"results":"43","hashOfConfig":"41"},{"size":1235,"mtime":1613058830430,"results":"44","hashOfConfig":"41"},{"size":13351,"mtime":1614356926833,"results":"45","hashOfConfig":"41"},{"size":22831,"mtime":1614358758538,"results":"46","hashOfConfig":"41"},{"size":7948,"mtime":1614271114426,"results":"47","hashOfConfig":"41"},{"size":2207,"mtime":1614271079600,"results":"48","hashOfConfig":"41"},{"size":1208,"mtime":1611938139066,"results":"49","hashOfConfig":"41"},{"size":99,"mtime":1612286058153,"results":"50","hashOfConfig":"41"},{"size":725,"mtime":1614265049906,"results":"51","hashOfConfig":"41"},{"size":2486,"mtime":1614265450854,"results":"52","hashOfConfig":"41"},{"size":3372,"mtime":1613171282389,"results":"53","hashOfConfig":"41"},{"size":443,"mtime":1612378794315,"results":"54","hashOfConfig":"41"},{"size":109,"mtime":1612454616732,"results":"55","hashOfConfig":"56"},{"size":115,"mtime":1612460251344,"results":"57","hashOfConfig":"56"},{"size":117,"mtime":1612465635264,"results":"58","hashOfConfig":"41"},{"size":2560,"mtime":1613058878951,"results":"59","hashOfConfig":"41"},{"size":119,"mtime":1612484838982,"results":"60","hashOfConfig":"41"},{"size":330,"mtime":1612553298780,"results":"61","hashOfConfig":"41"},{"size":188,"mtime":1612553579444,"results":"62","hashOfConfig":"41"},{"size":184,"mtime":1612890385674,"results":"63","hashOfConfig":"41"},{"size":450,"mtime":1612890981532,"results":"64","hashOfConfig":"41"},{"size":581,"mtime":1612891709389,"results":"65","hashOfConfig":"41"},{"size":567,"mtime":1612972832639,"results":"66","hashOfConfig":"41"},{"size":338,"mtime":1614271008492,"results":"67","hashOfConfig":"41"},{"size":496,"mtime":1612890536911,"results":"68","hashOfConfig":"41"},{"size":1548,"mtime":1613058849679,"results":"69","hashOfConfig":"41"},{"size":232,"mtime":1614300211469,"results":"70","hashOfConfig":"41"},{"size":4961,"mtime":1614358425401,"results":"71","hashOfConfig":"41"},{"size":942,"mtime":1612898541032,"results":"72","hashOfConfig":"41"},{"size":567,"mtime":1612973057247,"results":"73","hashOfConfig":"41"},{"size":1984,"mtime":1614356957060,"results":"74","hashOfConfig":"41"},{"size":348,"mtime":1614265101375,"results":"75","hashOfConfig":"41"},{"size":1691,"mtime":1614265174300,"results":"76","hashOfConfig":"41"},{"size":312,"mtime":1614265079356,"results":"77","hashOfConfig":"41"},{"size":815,"mtime":1614293897891,"results":"78","hashOfConfig":"41"},{"size":2118,"mtime":1614271104469,"results":"79","hashOfConfig":"41"},{"size":1016,"mtime":1614299451975,"results":"80","hashOfConfig":"41"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"12poc7w",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"83"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"83"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"83"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"83"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qidj17",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"83"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"83"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\index.js",[],["170","171"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\reportWebVitals.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\App.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\navBar.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\ReportsTable\\reportsTable.js",["172","173","174","175"],"import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid, } from '@material-ui/data-grid'\r\nimport MethodsTickets from '../../services/Tickets.service'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, Grid, IconButton, InputLabel, Menu, MenuItem, Select, TextField, Typography } from \"@material-ui/core\";\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport fullReportcss from '../../views/FullReport/fullReport.css'\r\nimport InterfaceDialog from '../../views/InterfaceDialog/interfaceDialog'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport statusCatalog from \"../../services/StatusCatalog/Status.service\";\r\n\r\nfunction ReportTable(props) {\r\n    const classes = fullReportcss();\r\n    const classMethods = new MethodsTickets();\r\n\r\n    const [isrefresh, setRefresh] = useState(false);\r\n    const [pagesize, setPageSize] = useState(10);\r\n    const [items, setItems] = useState([]);\r\n    const [isUpdate, setUpdate] = useState(true)\r\n    const [loading, setLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [countsrow, setrow] = useState(0);\r\n    const [id, setId] = useState(undefined)\r\n    const [visibleInterfaceDialog, setvisibleInterfaceDialog] = useState(false)\r\n    const [Result, setResult] = useState(undefined);\r\n    const [OpenComments, setOpenComments] = useState(false);\r\n    const procesos = statusCatalog();\r\n    const [ilabels, setIlabels] = useState([]);\r\n    const [idticket, setIdTicket] = useState(\"\");\r\n    const [idStatus, setIdStatus] = useState(\"\");\r\n    const [nameStatus, setNameStatus] = useState(\"\");\r\n    const [prevStatus, setPrevStatus] = useState(\"\");\r\n    const [prevcolor, setPrevColor] = useState(\"\");\r\n    const [color, setColor] = useState(\"\");\r\n\r\n    const changeStatus = (id, prevname, prevcolor, status) => {\r\n        setOpenComments(true);\r\n        setIdTicket(id);\r\n        setIdStatus(status.target.value);\r\n        setNameStatus(status.nativeEvent.toElement.innerText);\r\n        setPrevStatus(prevname);\r\n        setPrevColor(prevcolor);\r\n        setColor(status.nativeEvent.toElement.attributes.name.value);\r\n    }\r\n\r\n    const handleCloseComments = () => {\r\n        setOpenComments(false);\r\n    }\r\n\r\n    const handleSendStatus = () => {\r\n        classMethods.updateTicket(idticket, idStatus, document.getElementById(\"CommentStatus\").value, nameStatus, prevStatus, localStorage.getItem(\"iddeveloper\"), prevcolor, color).then((res) => {\r\n            setRefresh(!isrefresh);\r\n            setOpenComments(false);\r\n        });\r\n    }\r\n    function formato(texto) {\r\n        return texto.replace(/^(\\d{4})-(\\d{2})-(\\d{2})$/g, '$3/$2/$1');\r\n    }\r\n    const handlePageChange = (params) => {\r\n        setPage(params.page);\r\n    }\r\n\r\n    const handlepagresize = (params) => {\r\n        if (params.page > params.pageCount) {\r\n            setPage(page - 1)\r\n        }\r\n        setPageSize(params.pageSize)\r\n    }\r\n\r\n\r\n    const UpdateTable = async (n, it, id_client) => {\r\n        if (isUpdate) {\r\n            switch (props.typeuser) {\r\n\r\n                case \"client\":\r\n\r\n                    classMethods.getTickets(n, it, id_client).then(res => {\r\n                        setUpdate(false);\r\n                        setrow(res.totalItems);\r\n                        setItems(res.tickets);\r\n                        setIlabels([\r\n                            { field: 'id', headerName: 'ID', flex: .2 },\r\n                            { field: 'title', headerName: 'Titulo', flex: .25 },\r\n                            { field: 'process', headerName: 'Proceso', flex: .25 },\r\n                            { field: 'description', headerName: 'Descripción', flex: .25 },\r\n                            {\r\n                                field: 'status', headerName: 'Status', flex: .4, renderCell: (row) =>\r\n                                    (<><Typography style={{ display: \"flex\", margin: \"0x auto\", }} >{row.row.status.name}</Typography> <FiberManualRecordIcon style={{ color: row.row.status.color }} className={classes.statuscircle}></FiberManualRecordIcon></>)\r\n                            },\r\n                            {\r\n                                field: 'updatedAt', headerName: \"Actualizado en\", flex: .3, renderCell: (row) =>\r\n                                (< strong >\r\n                                    { formato((row.value).substr(0, 10))}\r\n                                </strong >)\r\n                            },\r\n                            {\r\n                                field: 'createdAt', headerName: 'Creado en', flex: .6, renderCell: (row) =>\r\n                                (< Grid container >\r\n                                    < Grid item style={{ display: \"auto\", margin: \"auto\", }}>\r\n                                        <strong >\r\n                                            {formato((row.value).substr(0, 10))}\r\n                                        </strong>\r\n                                    </Grid>\r\n                                    < Grid item style={{ display: \"auto\", margin: \"auto\", }}>\r\n                                        <IconButton\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size=\"small\"\r\n\r\n                                            onClick={() => isvisibleInterfaceDialog(row.row.id, undefined)}\r\n\r\n                                        ><VisibilityIcon /></IconButton>\r\n                                    </ Grid >\r\n                                </ Grid >)\r\n                            }])\r\n                    });\r\n                    break;\r\n                case \"admin\":\r\n                    classMethods.getAllTickets(n, it).then(res => {\r\n                        setUpdate(false);\r\n                        setrow(res.totalItems);\r\n                        setItems(res.tickets);\r\n                        setIlabels([\r\n                            { field: 'id', headerName: 'ID', flex: .13 },\r\n                            { field: 'title', headerName: 'TITULO', flex: .23 },\r\n                            { field: 'process', headerName: 'PROCESO', flex: .23 },\r\n                            { field: 'description', headerName: 'DESCRIPCIÓN', flex: .23 },\r\n                            {\r\n                                field: 'status', headerName: 'STATUS', flex: .23, renderCell: (row) =>\r\n                                    (<> <Typography style={{ display: \"flex\", margin: \"0 auto\", }} >{row.row.status.name}</Typography> <FiberManualRecordIcon style={{ color: row.row.status.color }} className={classes.statuscircle}></FiberManualRecordIcon></>)\r\n                            },\r\n                            {\r\n                                field: 'updatedAt', headerName: \"Actualizado en\", flex: .22, renderCell: (row) =>\r\n                                (< strong >\r\n                                    { formato((row.value).substr(0, 10))}\r\n                                </strong >)\r\n                            },\r\n                            {\r\n                                field: 'createdAt', headerName: 'Creado en', flex: .27, renderCell: (row) =>\r\n                                (< Grid container style={{ position: \"relative\" }} >\r\n                                    < Grid item style={{ top: \"23px\", position: \"relative\" }}>\r\n                                        <strong >\r\n                                            {formato((row.value).substr(0, 10))}\r\n                                        </strong>\r\n                                    </Grid>\r\n                                    <Grid item style={{ top: \"3px\", position: \"absolute\" }}>\r\n                                        <FormControl >\r\n                                            <InputLabel style={{ fontSize: \"14px\" }} htmlFor=\"status\">Status </InputLabel>\r\n                                            <Select style={{ fontSize: \"14px\", width: \"70px\" }}\r\n                                                key={row.row.id}\r\n                                                labelId={row.row.title}\r\n                                                id={row.row.id + row.row.title}\r\n                                                value={row.row.status.id}\r\n                                                onChange={changeStatus.bind(this, row.row.id, row.row.status.name, row.row.status.color)}\r\n\r\n                                            >\r\n                                                {procesos.map((proceso, index) => (\r\n                                                    <MenuItem style={{ fontSize: \"15px\" }} key={row.row.title + proceso.id + index} name={proceso.color} value={proceso.id}  >{proceso.name}</MenuItem>\r\n                                                ))}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    < Grid item style={{ position: \"absolute\", right: \"0%\" }}>\r\n                                        <IconButton\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size=\"small\"\r\n                                            onClick={() => isvisibleInterfaceDialog(row.row.id, undefined)}\r\n                                        ><VisibilityIcon /></IconButton>\r\n                                    </ Grid >\r\n                                </ Grid >)\r\n                            }])\r\n                    })\r\n                    break;\r\n                default:\r\n                    break;\r\n\r\n            }\r\n        } else { }\r\n    }\r\n    const visibleSuccess = () => {\r\n        return Result;\r\n    }\r\n    const isvisibleInterfaceDialog = (row, res) => {\r\n        setId(row);\r\n        setResult(res);\r\n        setvisibleInterfaceDialog(!visibleInterfaceDialog)\r\n    }\r\n    const refreshtable = () => {\r\n        setvisibleInterfaceDialog(false)\r\n        setRefresh(!isrefresh);\r\n\r\n    }\r\n    useEffect(() => {\r\n        let active = true;\r\n        (async () => {\r\n            setLoading(true);\r\n            setUpdate(true);\r\n            await UpdateTable(page, pagesize, localStorage.getItem(\"tokenClient\"));\r\n            await setLoading(false);\r\n            if (!active) {\r\n                return;\r\n            }\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [page, items, pagesize, isrefresh]);\r\n    useEffect(() => {\r\n        if (props.typeuser === \"client\") {\r\n            setvisibleInterfaceDialog(true)\r\n        }\r\n    }, [])\r\n\r\n    const ChangeSizeColumn = (e) => {\r\n        let es = [e]\r\n        es.map((item, index) => {\r\n            if (item[index]) {\r\n                console.log()\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div id=\"Container\" style={{ height: 1000, width: \"80%\", margin: \"0px 10%\" }}>\r\n            <Button className={classes.BtnNewReport} onClick={() => isvisibleInterfaceDialog()} >Crear Ticket</Button>\r\n            <DataGrid onStateChange={(e) => {\r\n                ChangeSizeColumn(e.state.columns.lookup);\r\n\r\n            }} disableColumnMenu showToolbar disableDensitySelector paginationMode=\"server\"\r\n                page={page}\r\n                onPageChange={handlePageChange}\r\n                loading={loading}\r\n                pageSize={10} rows={items} columns={ilabels}\r\n                rowCount={countsrow}\r\n                rowHeight={85}\r\n                rowsPerPageOptions={[10, 20, 40]}\r\n                onPageSizeChange={handlepagresize}\r\n                className={classes.Tabla}\r\n            />;\r\n            {!visibleInterfaceDialog ? <></> :\r\n                <InterfaceDialog\r\n                    isadmin={props.isadmin}\r\n                    isopen={visibleInterfaceDialog}\r\n                    callback={isvisibleInterfaceDialog}\r\n                    id={id}\r\n                    refresh={refreshtable}\r\n                />}\r\n            {Result !== undefined ? visibleSuccess() : Result}\r\n            {props.typeuser === \"admin\" ?\r\n                <Dialog open={OpenComments}>\r\n                    <DialogTitle id=\"form-dialog-title\">Actualizar Status de {prevStatus} a {nameStatus}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Deje un comentario acerca del status actualizado.</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"CommentStatus\"\r\n                            label=\"Comentario...\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleCloseComments} color=\"primary\">\r\n                            Cancelar\r\n          </Button>\r\n                        <Button onClick={handleSendStatus} color=\"primary\">\r\n                            Actualizar\r\n          </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null}\r\n\r\n        </div >\r\n    );\r\n\r\n}\r\n\r\nexport default ReportTable;","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\FullReport\\fullReport.js",["176","177","178","179","180","181","182","183"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\newReport.js",["184"],"import { TextField, Select, MenuItem, InputLabel, FormControl, Button, DialogTitle, DialogContent, DialogContentText, DialogActions, Dialog, } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport MethodsTickets from \"../../services/Tickets.service\";\r\nimport newReportcss from './newReport_css';\r\nimport Alerts from './Alerts/Alerts'\r\nimport CGetClients from \"../../services/Clients/Client.service\";\r\nimport MethodsProcess from '../../services/Procesos/Process.service'\r\n\r\nexport default function NewReport(props) {\r\n\r\n    // const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [process, setProcess] = React.useState(\"Sin Elección\");\r\n    const [subprocess, setSubProcess] = React.useState(\"Sin Elección\");\r\n    const [errTitle, setErrTitle] = React.useState(false);\r\n    const [errProcess, setErrProcess] = React.useState(false);\r\n    const [clients, setClients] = React.useState([]);\r\n    const [client, setClient] = React.useState(\"\");\r\n    const [clientoken, setClientToken] = useState(\"\");\r\n    // Styles\r\n    const classes = newReportcss();\r\n    const postTicket = new MethodsTickets();\r\n    const getClients = new CGetClients();\r\n    const processclient = new MethodsProcess();\r\n    const [RowProcess, setRowProcess] = useState([\"\"]);\r\n    const [RowSubProcess, setRowSubProcess] = useState([\"\"]);\r\n    const [isVisibleDropSub, setVisbileDropSub] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        gclients();\r\n\r\n        if (props.isadmin) {\r\n\r\n        } else {\r\n            processclient.getAllProcess().then(res => {\r\n                setRowProcess(res.rows);\r\n                setLoading(false);\r\n            });\r\n        }\r\n    }, [loading]);\r\n\r\n\r\n    const gclients = () => {\r\n\r\n        Promise.resolve(getClients.getClients().then(res => { setClients(res); }))\r\n    }\r\n    const handleChangeProcess = (event) => {\r\n        setProcess(event.target.value);\r\n        setErrProcess(false);\r\n    };\r\n    const handleChangeSubProcess = (event) => {\r\n        setSubProcess(event.target.value);\r\n        setErrProcess(false);\r\n    };\r\n    const handleChangeClient = (event) => {\r\n        setClient(event.target.value);\r\n        setClientToken(event.target.name);\r\n        processclient.getAllProcess(event.target.name).then(res => {\r\n            setRowProcess(res.rows);\r\n            setLoading(false);\r\n        });\r\n        setErrProcess(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n\r\n    }, [isVisibleDropSub]);\r\n\r\n\r\n    const alertDialog = < Dialog open={props.alertopen} >\r\n        <DialogTitle className={classes.DialogWarning} id=\"alert-dialog-title\">{\"¿Cerrar ventana?\"}</DialogTitle>\r\n        <DialogContent className={classes.DialogWarning}>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n                Se borrara la información de los campos del formulario llenos.\r\n              </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions className={classes.DialogWarning}>\r\n            <Button className={classes.Btns} onClick={props.handleCancel()} color=\"primary\">\r\n                No\r\n              </Button>\r\n            <Button className={classes.Btns} onClick={() => props.callback()} color=\"primary\" autoFocus>\r\n                Si\r\n              </Button>\r\n        </DialogActions></Dialog >;\r\n\r\n    const resultpost = (res) => {\r\n        switch (res) {\r\n            case 1: {\r\n                props.callback(undefined, <Alerts isOpen={true} />);\r\n                props.refresh();\r\n                break;\r\n            }\r\n            case 2: {\r\n\r\n                break;\r\n            }\r\n            default: {\r\n\r\n            }\r\n        }\r\n    }\r\n    const checkFields = () => {\r\n        let titletxt = document.getElementById(\"Title\").value;\r\n        let descriptiontxt = document.getElementById(\"Description\").value;\r\n\r\n        if (titletxt === \"\") {\r\n            setErrTitle(true);\r\n        }\r\n        else if (process === \"Sin Elección\") {\r\n            setErrProcess(true)\r\n        }\r\n        else if (!errProcess && !errTitle) {\r\n            sendTicket(titletxt, descriptiontxt);\r\n        }\r\n    }\r\n\r\n    const sendTicket = (titletxt, descriptiontxt) => {\r\n        if (props.isadmin) {\r\n            postTicket.postTicket({ clientId: client, title: titletxt, process: process, subprocess: subprocess, description: descriptiontxt, statusCatalogId: 1 }).then((res) => {\r\n                resultpost(res);\r\n            });\r\n        } else {\r\n\r\n            postTicket.postTicket({ clientId: parseInt(localStorage.getItem(\"ClientId\"), 10), title: titletxt, subprocess: subprocess, process: process, description: descriptiontxt, statusCatalogId: 1 }).then((res) => {\r\n                resultpost(res);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    function ActivateSub(item) {\r\n        setRowSubProcess(item);\r\n        setVisbileDropSub(true);\r\n\r\n    }\r\n    return (\r\n        <div >\r\n            {props.isadmin ?\r\n\r\n                <FormControl className={classes.FormControl}>\r\n                    <InputLabel htmlFor=\"age-native-simple\">Seleccione el Cliente</InputLabel>\r\n                    <Select error={errProcess} required\r\n                        labelId=\"procesos-lbl\"\r\n                        id=\"procesos-id\"\r\n                        value={client}\r\n                        onChange={handleChangeClient}\r\n                        variant=\"outlined\"\r\n                        name={clientoken}\r\n                    >\r\n                        {clients.map((proceso) =>\r\n                            (<MenuItem key={proceso.id} value={proceso.id} name={proceso.token} >{proceso.name}</MenuItem>)\r\n                        )}\r\n                    </Select>\r\n                </FormControl> : null}\r\n\r\n            <TextField id=\"Title\" variant=\"outlined\" label=\"Titulo\" error={errTitle} required onChange={() => setErrTitle(false)} className={classes.TextField} />\r\n            <FormControl className={classes.FormControl}>\r\n                <InputLabel htmlFor=\"age-native-simple\" >Seleccione el Proceso</InputLabel>\r\n                <Select error={errProcess} required\r\n                    placeholder=\"Seleccionar Proceso\"\r\n                    labelId=\"procesos-lbl\"\r\n                    id=\"procesos-id\"\r\n                    value={process}\r\n                    onChange={handleChangeProcess}\r\n                    variant=\"outlined\"\r\n                >\r\n                    {RowProcess.map((proceso) => (\r\n                        <MenuItem key={proceso.id + proceso.name} onClick={() => ActivateSub(proceso.subproceso)} value={proceso.name} >{proceso.name}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            {isVisibleDropSub ?\r\n                <FormControl className={classes.FormControl}>\r\n                    <InputLabel htmlFor=\"age-native-simple\" >Seleccione el Subproceso</InputLabel>\r\n                    <Select error={errProcess} required\r\n                        placeholder=\"Seleccionar Proceso\"\r\n                        labelId=\"subprocesos-lbl\"\r\n                        id=\"subprocesos-id\"\r\n                        value={subprocess}\r\n                        onChange={handleChangeSubProcess}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        {RowSubProcess.map((proceso) => (\r\n                            <MenuItem key={proceso.id + proceso.name} value={proceso.name} >{proceso.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                : null}\r\n            <TextField id=\"Description\" label=\"Descripción\" multiline rows={8} variant=\"outlined\" className={classes.TextField} />\r\n            <FormControl className={classes.FormControl}>\r\n                <Button onClick={() => checkFields()} className={classes.SendBtn}>Enviar</Button>\r\n            </FormControl>\r\n            {alertDialog}\r\n        </div>\r\n    );\r\n\r\n}","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\InterfaceDialog\\interfaceDialog.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\Alerts\\Alerts.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Home\\home.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginClient\\loginClient.js",["185"],"import { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport validateClient from '../../services/validateClient'\r\n\r\nfunction LoginClient(props) {\r\n    const { match: { params } } = props;\r\n    const [islogin, setlogin] = useState(false);\r\n    function checklogin() {\r\n        validateClient(0, 5, params.id);\r\n\r\n    }\r\n    useEffect(() => {\r\n        setlogin(localStorage.getItem(\"istokenClient\"))\r\n    }, [localStorage.getItem(\"istokenClient\")])\r\n\r\n    return (\r\n        <div>\r\n            {islogin ?\r\n                <Redirect to=\"/helper\" > </Redirect> : <div> {checklogin()} </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LoginClient;","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Admin\\admin.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginEmployes\\loginEmployes.js",["186"],"import { Button, TextField } from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\nimport axios from \"../../axios/Config\"\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport NavBar from \"../../components/NavBar/navBar\";\r\nimport { useAuthAdmin, useAuthLogin } from \"../PrivateRoutes/contexts/contextRoutes\";\r\nimport useStyles from './loginEmployescss'\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nfunction LoginEmployed() {\r\n    const { setAuthTokensEmployes } = useAuthAdmin();\r\n    const { setAuthLogin } = useAuthLogin();\r\n    const [change, setchange] = useState(true)\r\n    const [errorUser, setErrorUser] = useState(false);\r\n    const [errorPass, setErrorPass] = useState(false);\r\n    const [invaliduser, setInvalidUser] = useState(null);\r\n    const classes = useStyles();\r\n\r\n    const checkFields = (e) => {  // Revisar si estan llenos los campos\r\n        const getuser = document.getElementById(\"user\").value;\r\n        const getpassword = document.getElementById(\"password\").value;\r\n        switch (true) {\r\n            case getuser === \"\" && getpassword === \"\":\r\n                setErrorPass(true);\r\n                setErrorUser(true);\r\n                break;\r\n            case getuser === \"\":\r\n                setErrorUser(true);\r\n                break;\r\n            case getpassword === \"\":\r\n                setErrorPass(true);\r\n                break;\r\n            default:\r\n                checklogin(getuser, getpassword)\r\n                break;\r\n        }\r\n\r\n    }\r\n    const CancelToken = Axios.CancelToken;\r\n    const source = CancelToken.source();\r\n    const checklogin = async (user, pass) => {  // Revisar si existe el usuario y contraseña\r\n        let params = {};\r\n        params[\"user\"] = user;\r\n        params[\"password\"] = pass;\r\n        params[\"page\"] = 0;\r\n        params[\"size\"] = 5;\r\n        await axios.get(\"/api/developer/\", { cancelToken: source.token, params }).then(res => {\r\n            if (res.data.dev.length) {\r\n                localStorage.setItem(\"tokenDeveloper\", user);\r\n                localStorage.setItem(\"iddeveloper\", res.data.dev[0].name);\r\n                setAuthTokensEmployes(true);\r\n                setAuthLogin(true)\r\n                setchange(false)\r\n            } else {\r\n                setInvalidUser(<Alert severity=\"error\">Error Usuario o contraseña incorrecto</Alert>)\r\n            }\r\n        }).catch(err => { console.log(err) });\r\n    }\r\n\r\n    useEffect(() => { // Ejecutar de nuevo el componente en caso que cambie el estado change\r\n        return () => {\r\n            source.cancel();\r\n        };\r\n    }, [change])\r\n\r\n\r\n    return (\r\n        <>{change ?\r\n            <>\r\n                <NavBar title=\"Iniciar Sesión\" />\r\n                <form className={classes.root} autoComplete=\"off\">\r\n\r\n                    <TextField error={errorUser} id=\"user\" required label=\"Usuario\" />\r\n                    <TextField error={errorPass} id=\"password\" onKeyDown={(e) => e.keyCode === 13 ? checkFields(e) : null} required label=\"Password\" />\r\n                    {invaliduser}\r\n                    <Button className={classes.btn} onClick={() => checkFields()}>Iniciar Sesión</Button >\r\n\r\n                </form>\r\n            </>\r\n            : <Redirect to=\"/admin/tickets\" />}\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default LoginEmployed;\r\n\r\n","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginEmployes\\loginEmployescss.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\Cotizador.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorTable\\CotizadorTable.js",[],["187","188"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorAdmin\\cotizadorAdmin.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\sidebar\\sidebar.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorClient\\cotizadorclient.js",[],["189","190"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Description_Helper\\Des_Helper.js",[],["191","192"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Description_Helper\\Des_helper_css.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\Axios\\Config.js",["193"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\contexts\\contextRoutes.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateadmin\\privateAdmin.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateHelper\\privateHelper.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Faq_View\\Faqs_View.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Faq_View\\Faqs\\Faqs.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\navBar_css.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\axios\\Config.js",["194"],"import axios from 'axios';\r\n\r\n\r\n\r\nconst local = \"http://localhost:8080\";\r\n// const heroku = \"https://pure-atoll-22967.herokuapp.com\"\r\nconst prod = \"https://helper.adn-apps.com\";\r\nexport default axios.create({\r\n    baseURL: local\r\n})","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\FullReport\\fullReport.css.js",["195","196","197"],"import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst anchostatus = 25;\r\n\r\nconst fullReportcss = makeStyles((theme) => ({\r\n    primary: {\r\n        backgroundColor: \"#6D9EEB\"\r\n    },\r\n    secondary: {\r\n        backgroundColor: \"#787879\"\r\n\r\n    },\r\n    ListComments: {\r\n        maxHeight: \"400px\",\r\n        overflow: \"auto\"\r\n    },\r\n    item: {\r\n        margin: \"10px 5%\",\r\n        padding: \"0px 0px\",\r\n        backgroundColor: \"#DCF8C6\",\r\n        borderRadius: \"20px\",\r\n        width: \"90%\",\r\n\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        backgroundColor: \"#424242\",\r\n        color: \"#FFF\",\r\n        fontSize: \"18px\"\r\n    },\r\n    heading2: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        backgroundColor: \"#128C7E\",\r\n        color: \"#FFF\",\r\n        fontSize: \"12px\",\r\n        padding: \"10px 0\"\r\n    },\r\n    heading3: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        backgroundColor: \"#fff\",\r\n        color: \"#FFF\",\r\n        fontSize: \"12px\",\r\n\r\n    },\r\n    List: {\r\n        width: '100%',\r\n        backgroundColor: \"#F1F3F6\",\r\n        color: \"#000\"\r\n    },\r\n    bar: {\r\n        position: \"relative\",\r\n    },\r\n    inline: {\r\n        fontSize: \"14px\",\r\n        color: \"#000\",\r\n        borderRadius: \"40px\",\r\n        padding: \"5px 20px\"\r\n\r\n    },\r\n    titleprocess: {\r\n        position: \"relative\",\r\n        fontSize: \"13px\",\r\n        color: \"#000\",\r\n        borderRadius: \"40px\",\r\n        padding: \"5px 2px\",\r\n    },\r\n    name: {\r\n        fontSize: \"12px\",\r\n        color: \"#000\",\r\n        borderRadius: \"40px\",\r\n        marginTop: \"5px\",\r\n        marginLeft: \"20px\"\r\n\r\n    },\r\n    inlinelast: {\r\n        position: \"relative\",\r\n        fontSize: \"12px\",\r\n        color: \"#000\",\r\n        padding: \"20px 20px\"\r\n    },\r\n    commentadd: {\r\n        backgroundColor: \"white\",\r\n        width: \"90%\",\r\n        padding: \"20px 0px\"\r\n    },\r\n    btndeleteComment: {\r\n        fontSize: \"12px\",\r\n        color: \"red\",\r\n        width: \"15px\",\r\n        height: \"15px\"\r\n    },\r\n    BtnClose: {\r\n        backgroundColor: 'white',\r\n        fontFamily: ['Montserrat', 'sans-serif'].join(','),\r\n        color: 'red',\r\n        width: '40px',\r\n        height: '40px',\r\n        '&:hover': {\r\n            backgroundColor: 'red',\r\n            color: 'white'\r\n        }\r\n    },\r\n    btnElimarComment:\r\n    {\r\n        background: \"linear-gradient(to right, red,red)\",\r\n        color: \"white\",\r\n        marginTop: \"10px\",\r\n        marginBottom: \"10px\",\r\n        marginLeft: \"15px\",\r\n        \"&:hover\": {\r\n            background: \"linear-gradient(to right, #6D5BBB,#6D5BBB)\"\r\n        }\r\n    },\r\n    btnNormal: {\r\n        background: \"linear-gradient(to right, #6D9EEB,#6D9EEB)\",\r\n        color: \"white\",\r\n        marginBottom: \"5px\",\r\n        \"&:hover\": {\r\n            background: \"linear-gradient(to right, #6D5BBB,#6D5BBB)\"\r\n        }\r\n    },\r\n    btnactchat: {\r\n        background: \"linear-gradient(to right, #6D9EEB,#6D9EEB)\",\r\n        color: \"white\",\r\n        \"&:hover\": {\r\n            background: \"linear-gradient(to right, #6D5BBB,#6D5BBB)\"\r\n        }\r\n    },\r\n    btnsend: {\r\n        backgroundColor: \"#25D366\",\r\n        color: \"white\",\r\n        height: \"40px\",\r\n        width: \"40px\",\r\n        margin: \"10px\"\r\n    },\r\n    BtnNewReport: {\r\n        background: \"linear-gradient(to right, #6D9EEB,#6D9EEB)\",\r\n        color: \"white\",\r\n        margin: \"20px 20px\",\r\n        position: \"relative\",\r\n        width: \"200px\",\r\n        \"&:hover\": {\r\n            background: \"linear-gradient(to right, #6D5BBB,#6D5BBB)\"\r\n        }\r\n    }\r\n    ,\r\n    AppBarTitle: {\r\n        marginLeft: \"20px\",\r\n        fontFamily: ['Montserrat', 'sans-serif'].join(\",\"),\r\n    },\r\n    Body: {\r\n        margin: \"10px 50px\",\r\n        backgroundColor: \"white\",\r\n        position: \"relative\",\r\n    },\r\n    BodyTitle: {\r\n        fontFamily: ['Montserrat', 'sans-serif'].join(\",\"),\r\n        display: \"flex\",\r\n        margin: \"10px 0\"\r\n    },\r\n    Title: {\r\n        fontFamily: ['Montserrat', 'sans-serif'].join(\",\"),\r\n        margin: \"10px 0\"\r\n    },\r\n    Status: {\r\n        fontFamily: ['Montserrat', 'sans-serif'].join(\",\"),\r\n        margin: \"10px 0\",\r\n        display: \"flex\"\r\n    },\r\n    Description: {\r\n        fontFamily: ['Montserrat', 'sans-serif'].join(\",\"),\r\n        margin: \"10px 0\",\r\n        color: \"black\",\r\n        fontSize: \"20px\",\r\n        backgroundColor: \"#F1F3F6\"\r\n    },\r\n    statuscircle: {\r\n        height: anchostatus,\r\n        width: anchostatus,\r\n        display: \"flex\",\r\n        margin: \" auto\",\r\n    },\r\n    statuscircletitle: {\r\n        height: 15,\r\n        width: 15,\r\n        verticalAlign: 'middle',\r\n        display: 'inline-flex',\r\n        border: \"2px solid #000\",\r\n        borderRadius: \"40px\"\r\n    },\r\n\r\n}));\r\n\r\nexport default fullReportcss;","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\newReport_css.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateLogin\\privateLogin.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Tickets.service.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Clients\\Client.service.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Procesos\\Process.service.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\StatusCatalog\\Status.service.js",["198"],"import axios from '../../axios/Config';\r\n\r\nfunction statusCatalog() {\r\n    let catalog = [];\r\n\r\n    axios.get(\"/api/statuscatalog/\").then(res => {\r\n        res.data.map((item, index) => { catalog.push(item) })\r\n    }).catch(err => { console.log(err) });\r\n    return catalog;\r\n}\r\n\r\n\r\nexport default statusCatalog;","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\validateClient.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Helper\\faqView.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Comments\\comment.service.js",[],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":4,"column":131,"nodeType":"205","messageId":"206","endLine":4,"endColumn":135},{"ruleId":"207","severity":1,"message":"208","line":208,"column":8,"nodeType":"209","endLine":208,"endColumn":42,"suggestions":"210"},{"ruleId":"207","severity":1,"message":"211","line":213,"column":8,"nodeType":"209","endLine":213,"endColumn":10,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":217,"column":30,"nodeType":"215","messageId":"216","endLine":217,"endColumn":32},{"ruleId":"203","severity":1,"message":"217","line":1,"column":47,"nodeType":"205","messageId":"206","endLine":1,"endColumn":55},{"ruleId":"203","severity":1,"message":"218","line":1,"column":87,"nodeType":"205","messageId":"206","endLine":1,"endColumn":95},{"ruleId":"203","severity":1,"message":"219","line":1,"column":97,"nodeType":"205","messageId":"206","endLine":1,"endColumn":109},{"ruleId":"203","severity":1,"message":"220","line":1,"column":153,"nodeType":"205","messageId":"206","endLine":1,"endColumn":166},{"ruleId":"203","severity":1,"message":"221","line":16,"column":12,"nodeType":"205","messageId":"206","endLine":16,"endColumn":16},{"ruleId":"203","severity":1,"message":"222","line":16,"column":18,"nodeType":"205","messageId":"206","endLine":16,"endColumn":25},{"ruleId":"207","severity":1,"message":"223","line":57,"column":8,"nodeType":"209","endLine":57,"endColumn":16,"suggestions":"224"},{"ruleId":"203","severity":1,"message":"225","line":297,"column":11,"nodeType":"205","messageId":"206","endLine":297,"endColumn":25},{"ruleId":"207","severity":1,"message":"226","line":40,"column":8,"nodeType":"209","endLine":40,"endColumn":17,"suggestions":"227"},{"ruleId":"207","severity":1,"message":"228","line":15,"column":9,"nodeType":"229","endLine":15,"endColumn":46},{"ruleId":"207","severity":1,"message":"230","line":66,"column":8,"nodeType":"209","endLine":66,"endColumn":16,"suggestions":"231"},{"ruleId":"199","replacedBy":"232"},{"ruleId":"201","replacedBy":"233"},{"ruleId":"199","replacedBy":"234"},{"ruleId":"201","replacedBy":"235"},{"ruleId":"199","replacedBy":"236"},{"ruleId":"201","replacedBy":"237"},{"ruleId":"203","severity":1,"message":"238","line":6,"column":7,"nodeType":"205","messageId":"206","endLine":6,"endColumn":13},{"ruleId":"203","severity":1,"message":"239","line":7,"column":7,"nodeType":"205","messageId":"206","endLine":7,"endColumn":11},{"ruleId":"240","severity":1,"message":"241","line":30,"column":9,"nodeType":"242","messageId":"243","endLine":30,"endColumn":17},{"ruleId":"240","severity":1,"message":"241","line":37,"column":9,"nodeType":"242","messageId":"243","endLine":37,"endColumn":17},{"ruleId":"240","severity":1,"message":"241","line":45,"column":9,"nodeType":"242","messageId":"243","endLine":45,"endColumn":17},{"ruleId":"213","severity":1,"message":"214","line":7,"column":36,"nodeType":"215","messageId":"216","endLine":7,"endColumn":38},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'UpdateTable'. Either include it or remove the dependency array.","ArrayExpression",["246"],"React Hook useEffect has a missing dependency: 'props.typeuser'. Either include it or remove the dependency array.",["247"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Collapse' is defined but never used.","'GridList' is defined but never used.","'GridListTile' is defined but never used.","'ListSubheader' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ticketProps'. Either include it or remove the dependency array.",["248"],"'selectStatusbk' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'gclients', 'processclient', and 'props.isadmin'. Either include them or remove the dependency array.",["249"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'source'. Either include it or remove the dependency array.",["250"],["244"],["245"],["244"],["245"],["244"],["245"],"'heroku' is assigned a value but never used.","'prod' is assigned a value but never used.","no-dupe-keys","Duplicate key 'fontSize'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},"Update the dependencies array to be: [page, items, pagesize, isrefresh, UpdateTable]",{"range":"261","text":"262"},"Update the dependencies array to be: [props.typeuser]",{"range":"263","text":"264"},"Update the dependencies array to be: [issend, ticketProps]",{"range":"265","text":"266"},"Update the dependencies array to be: [gclients, loading, processclient, props.isadmin]",{"range":"267","text":"268"},"Update the dependencies array to be: [change, source]",{"range":"269","text":"270"},[10562,10596],"[page, items, pagesize, isrefresh, UpdateTable]",[10730,10732],"[props.typeuser]",[2337,2345],"[issend, ticketProps]",[1742,1751],"[gclients, loading, processclient, props.isadmin]",[2641,2649],"[change, source]"]