[{"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\index.js":"1","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\reportWebVitals.js":"2","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\App.js":"3","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Faq\\faqView.js":"4","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\navBar.js":"5","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\ReportsTable\\reportsTable.js":"6","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\methodsTickets.js":"7","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\FullReport\\fullReport.js":"8","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\newReport.js":"9","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\InterfaceDialog\\interfaceDialog.js":"10","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\Alerts\\Alerts.js":"11","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Home\\home.js":"12","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\validateClient.js":"13","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginClient\\loginClient.js":"14","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Admin\\admin.js":"15","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginEmployes\\loginEmployes.js":"16","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginEmployes\\loginEmployescss.js":"17","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\Cotizador.js":"18","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorTable\\CotizadorTable.js":"19","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorAdmin\\cotizadorAdmin.js":"20","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\sidebar\\sidebar.js":"21","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorClient\\cotizadorclient.js":"22","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Description_Helper\\Des_Helper.js":"23","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Description_Helper\\Des_helper_css.js":"24","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\Axios\\Config.js":"25","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\contexts\\contextRoutes.js":"26","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateadmin\\privateAdmin.js":"27","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateHelper\\privateHelper.js":"28","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\StatusCatalog\\StatusService.js":"29","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Faq_View\\Faqs_View.js":"30","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Faq_View\\Faqs\\Faqs.js":"31","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\navBar_css.js":"32","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\axios\\Config.js":"33","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\Clients\\ClientService.js":"34","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\FullReport\\fullReport.css.js":"35","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\newReport_css.js":"36","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateLogin\\privateLogin.js":"37","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\Procesos\\methodsProces.js":"38"},{"size":455,"mtime":1611332720144,"results":"39","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"41","hashOfConfig":"40"},{"size":2416,"mtime":1613058776713,"results":"42","hashOfConfig":"40"},{"size":2112,"mtime":1614194668338,"results":"43","hashOfConfig":"40"},{"size":1235,"mtime":1613058830430,"results":"44","hashOfConfig":"40"},{"size":13294,"mtime":1614212145505,"results":"45","hashOfConfig":"40"},{"size":1557,"mtime":1614212519608,"results":"46","hashOfConfig":"40"},{"size":6850,"mtime":1614212710649,"results":"47","hashOfConfig":"40"},{"size":8001,"mtime":1614206629716,"results":"48","hashOfConfig":"40"},{"size":2213,"mtime":1614120498496,"results":"49","hashOfConfig":"40"},{"size":1208,"mtime":1611938139066,"results":"50","hashOfConfig":"40"},{"size":99,"mtime":1612286058153,"results":"51","hashOfConfig":"40"},{"size":760,"mtime":1613780592850,"results":"52","hashOfConfig":"40"},{"size":733,"mtime":1613780631930,"results":"53","hashOfConfig":"40"},{"size":2557,"mtime":1613058673570,"results":"54","hashOfConfig":"40"},{"size":3372,"mtime":1613171282389,"results":"55","hashOfConfig":"40"},{"size":443,"mtime":1612378794315,"results":"56","hashOfConfig":"40"},{"size":109,"mtime":1612454616732,"results":"57","hashOfConfig":"58"},{"size":115,"mtime":1612460251344,"results":"59","hashOfConfig":"58"},{"size":117,"mtime":1612465635264,"results":"60","hashOfConfig":"40"},{"size":2560,"mtime":1613058878951,"results":"61","hashOfConfig":"40"},{"size":119,"mtime":1612484838982,"results":"62","hashOfConfig":"40"},{"size":330,"mtime":1612553298780,"results":"63","hashOfConfig":"40"},{"size":188,"mtime":1612553579444,"results":"64","hashOfConfig":"40"},{"size":184,"mtime":1612890385674,"results":"65","hashOfConfig":"40"},{"size":450,"mtime":1612890981532,"results":"66","hashOfConfig":"40"},{"size":581,"mtime":1612891709389,"results":"67","hashOfConfig":"40"},{"size":567,"mtime":1612972832639,"results":"68","hashOfConfig":"40"},{"size":315,"mtime":1613058940063,"results":"69","hashOfConfig":"40"},{"size":374,"mtime":1612890538327,"results":"70","hashOfConfig":"40"},{"size":496,"mtime":1612890536911,"results":"71","hashOfConfig":"40"},{"size":1548,"mtime":1613058849679,"results":"72","hashOfConfig":"40"},{"size":228,"mtime":1614212745219,"results":"73","hashOfConfig":"40"},{"size":351,"mtime":1613773095866,"results":"74","hashOfConfig":"40"},{"size":2552,"mtime":1614194898391,"results":"75","hashOfConfig":"40"},{"size":942,"mtime":1612898541032,"results":"76","hashOfConfig":"40"},{"size":567,"mtime":1612973057247,"results":"77","hashOfConfig":"40"},{"size":1694,"mtime":1614120218809,"results":"78","hashOfConfig":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"12poc7w",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"81"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"81"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"81"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"81"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"81"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"81"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"81"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qidj17",{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"81"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"81"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\index.js",[],["168","169"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\reportWebVitals.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\App.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Faq\\faqView.js",["170","171"],"import React, { useState } from 'react'\r\nimport { Grid, IconButton, makeStyles } from '@material-ui/core';\r\nimport Faq from '../../components/Faq_View/Faqs_View';\r\nimport ReportTable from '../../components/ReportsTable/reportsTable';\r\nimport NavBar from '../../components/NavBar/navBar';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport Des_Helper from '../../components/Description_Helper/Des_Helper';\r\nimport { useAuthClient } from '../PrivateRoutes/contexts/contextRoutes';\r\n\r\nfunction FaqView() {\r\n    const useStyles = makeStyles({\r\n        list: {\r\n            width: 250,\r\n        },\r\n        fullList: {\r\n            width: 'auto',\r\n        },\r\n        btn: {\r\n            marginRight: \"40px\"\r\n        },\r\n        center: {\r\n            textAlign: \"center\"\r\n        },\r\n        btnend: {\r\n            position: \"absolute\",\r\n            right: \"20px\",\r\n        },\r\n    });\r\n    const { setAuthTokensClients } = useAuthClient();\r\n\r\n    const classes = useStyles();\r\n    const [change, setChange] = useState(false);\r\n    useEffect(() => {\r\n    }, [change]);\r\n\r\n\r\n    useEffect(() => {\r\n        document.title = \"Tickets\"\r\n    })\r\n\r\n    const exit = () => {\r\n        setAuthTokensClients(false)\r\n        localStorage.removeItem(\"istokenClient\")\r\n        setChange(true);\r\n    }\r\n\r\n    return (<>\r\n        {!change ?\r\n            <>\r\n                <NavBar title={\"Helper\"} tickets={\"/helper/tickets\"} cotizaciones={\"\"} logout={<IconButton className={classes.btnend} onClick={() => exit()}><ExitToAppIcon /></IconButton>} />\r\n                < Grid container >\r\n                    {/* <Grid item xl={12} lg={12} md={12} sm={12} xs={12} > <Des_Helper /></Grid>\r\n                    <Grid item xl={5} lg={5} md={5} sm={12} xs={12} >  <Faq /></Grid> */}\r\n                    <Grid item xl={12} lg={12} md={12} sm={12} xs={12}><ReportTable typeuser=\"client\" /></Grid>\r\n                </Grid>\r\n            </>\r\n            :\r\n            <Redirect to=\"/\" />\r\n        }</>\r\n    );\r\n\r\n}\r\n\r\nexport default FaqView;","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\navBar.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\ReportsTable\\reportsTable.js",["172","173","174","175"],"import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid, } from '@material-ui/data-grid'\r\nimport MethodsTickets from '../../services/Methods/methodsTickets'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, Grid, IconButton, InputLabel, MenuItem, Select, TextField, Typography } from \"@material-ui/core\";\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport fullReportcss from '../../views/FullReport/fullReport.css'\r\nimport InterfaceDialog from '../../views/InterfaceDialog/interfaceDialog'\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport statusCatalog from \"../../services/Methods/StatusCatalog/StatusService\";\r\n\r\nfunction ReportTable(props) {\r\n    const classes = fullReportcss();\r\n    const classMethods = new MethodsTickets();\r\n    const [isrefresh, setRefresh] = useState(false);\r\n    const [pagesize, setPageSize] = useState(10);\r\n    const [items, setItems] = useState([]);\r\n    const [isUpdate, setUpdate] = useState(true)\r\n    const [loading, setLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [countsrow, setrow] = useState(0);\r\n    const [id, setId] = useState(undefined)\r\n    const [visibleInterfaceDialog, setvisibleInterfaceDialog] = useState(false)\r\n    const [Result, setResult] = useState(undefined);\r\n    const [OpenComments, setOpenComments] = useState(false);\r\n    const procesos = statusCatalog();\r\n    const [ilabels, setIlabels] = useState([]);\r\n    const [idStatus, setIdStatus] = useState(\"\");\r\n    const [nameStatus, setNameStatus] = useState(\"\");\r\n\r\n    const changeStatus = (id, status) => {\r\n        setOpenComments(true);\r\n        setIdStatus(id);\r\n        setNameStatus(status.target.value);\r\n    }\r\n\r\n    const handleCloseComments = () => {\r\n        setOpenComments(false);\r\n    }\r\n\r\n    const handleSendStatus = () => {\r\n        classMethods.updateTicket(idStatus, nameStatus, document.getElementById(\"CommentStatus\").value).then(() => {\r\n            setRefresh(!isrefresh);\r\n            setOpenComments(false);\r\n        });\r\n    }\r\n    function formato(texto) {\r\n        return texto.replace(/^(\\d{4})-(\\d{2})-(\\d{2})$/g, '$3/$2/$1');\r\n    }\r\n    const handlePageChange = (params) => {\r\n        setPage(params.page);\r\n    }\r\n\r\n    const handlepagresize = (params) => {\r\n        if (params.page > params.pageCount) {\r\n            setPage(page - 1)\r\n        }\r\n        setPageSize(params.pageSize)\r\n    }\r\n\r\n    const selectStatusbk = (idStatus) => {\r\n        switch (idStatus) {\r\n            case 1: {\r\n\r\n                return classes.green;\r\n            }\r\n            case 2: {\r\n                return classes.gray;\r\n            }\r\n            case 3: {\r\n                return classes.blue;\r\n            }\r\n            case 4: {\r\n                return classes.yellow;\r\n            }\r\n            default: {\r\n                return classes.white;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    const UpdateTable = async (n, it, id_client) => {\r\n        if (isUpdate) {\r\n            switch (props.typeuser) {\r\n\r\n                case \"client\":\r\n\r\n                    classMethods.getTickets(n, it, id_client).then(res => {\r\n                        setUpdate(false);\r\n                        setrow(res.totalItems);\r\n                        setItems(res.tickets);\r\n                        setIlabels([\r\n                            { field: 'id', headerName: 'ID', flex: .2 },\r\n                            { field: 'title', headerName: 'Titulo', flex: .25 },\r\n                            { field: 'process', headerName: 'Proceso', flex: .25 },\r\n                            { field: 'description', headerName: 'Descripción', flex: .25 },\r\n                            {\r\n                                field: 'status', headerName: 'Status', flex: .4, renderCell: (row) =>\r\n                                    (<><Typography style={{ display: \"flex\", margin: \"0x auto\", }} >{row.row.status.name}</Typography> <FiberManualRecordIcon className={selectStatusbk(row.row.status.id)}></FiberManualRecordIcon></>)\r\n                            },\r\n                            {\r\n                                field: 'updatedAt', headerName: \"Actualizado en\", flex: .3, renderCell: (row) =>\r\n                                (< strong >\r\n                                    { formato((row.value).substr(0, 10))}\r\n                                </strong >)\r\n                            },\r\n                            {\r\n                                field: 'createdAt', headerName: 'Creado en', flex: .6, renderCell: (row) =>\r\n                                (< Grid container >\r\n                                    < Grid item style={{ display: \"auto\", margin: \"auto\", }}>\r\n                                        <strong >\r\n                                            {formato((row.value).substr(0, 10))}\r\n                                        </strong>\r\n                                    </Grid>\r\n                                    < Grid item style={{ display: \"auto\", margin: \"auto\", }}>\r\n                                        <IconButton\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size=\"small\"\r\n\r\n                                            onClick={() => isvisibleInterfaceDialog(row.row.id, undefined)}\r\n\r\n                                        ><VisibilityIcon /></IconButton>\r\n                                    </ Grid >\r\n                                </ Grid >)\r\n                            }])\r\n                    });\r\n                    break;\r\n                case \"admin\":\r\n                    classMethods.getAllTickets(n, it).then(res => {\r\n                        setUpdate(false);\r\n                        setrow(res.totalItems);\r\n                        setItems(res.tickets);\r\n                        let cont = document.getElementById(\"Container\").offsetWidth\r\n                        setIlabels([\r\n                            { field: 'id', headerName: 'ID', flex: .13 },\r\n                            { field: 'title', headerName: 'TITULO', flex: .23 },\r\n                            { field: 'process', headerName: 'PROCESO', flex: .23 },\r\n                            { field: 'description', headerName: 'DESCRIPCIÓN', flex: .23 },\r\n                            {\r\n                                field: 'status', headerName: 'STATUS', flex: .23, renderCell: (row) =>\r\n                                    (<> <Typography style={{ display: \"flex\", margin: \"0 auto\", }} >{row.row.status.name}</Typography> <FiberManualRecordIcon className={selectStatusbk(row.row.status.id)}></FiberManualRecordIcon></>)\r\n                            },\r\n                            {\r\n                                field: 'updatedAt', headerName: \"Actualizado en\", flex: .22, renderCell: (row) =>\r\n                                (< strong >\r\n                                    { formato((row.value).substr(0, 10))}\r\n                                </strong >)\r\n                            },\r\n                            {\r\n                                field: 'createdAt', headerName: 'Creado en', flex: .27, renderCell: (row) =>\r\n                                (< Grid container style={{ position: \"relative\" }} >\r\n                                    < Grid item style={{ top: \"23px\", position: \"relative\" }}>\r\n                                        <strong >\r\n                                            {formato((row.value).substr(0, 10))}\r\n                                        </strong>\r\n                                    </Grid>\r\n                                    <Grid item style={{ top: \"3px\", position: \"absolute\" }}>\r\n                                        <FormControl >\r\n                                            <InputLabel style={{ fontSize: \"14px\" }} htmlFor=\"age-native-simple\">Status </InputLabel>\r\n                                            <Select style={{ fontSize: \"14px\", width: \"70px\" }}\r\n                                                key={row.row.id}\r\n                                                labelId={row.row.title}\r\n                                                id={row.row.id + row.row.title}\r\n                                                value={row.row.status.id}\r\n                                                onChange={changeStatus.bind(this, row.row.id)}\r\n                                            >\r\n                                                {procesos.map((proceso, index) => (\r\n                                                    <MenuItem style={{ fontSize: \"15px\" }} key={row.row.title + proceso.id + index} value={proceso.id} >{proceso.id + \" \" + proceso.name}</MenuItem>\r\n                                                ))}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    < Grid item style={{ position: \"absolute\", right: \"0%\" }}>\r\n                                        <IconButton\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            size=\"small\"\r\n                                            onClick={() => isvisibleInterfaceDialog(row.row.id, undefined)}\r\n                                        ><VisibilityIcon /></IconButton>\r\n                                    </ Grid >\r\n                                </ Grid >)\r\n                            }])\r\n                    })\r\n                    break;\r\n                default:\r\n                    break;\r\n\r\n            }\r\n        } else { }\r\n    }\r\n    const visibleSuccess = () => {\r\n        return Result;\r\n    }\r\n    const isvisibleInterfaceDialog = (row, res) => {\r\n        setId(row);\r\n        setResult(res);\r\n        setvisibleInterfaceDialog(!visibleInterfaceDialog)\r\n    }\r\n    const refreshtable = () => {\r\n        setvisibleInterfaceDialog(false)\r\n        setRefresh(!isrefresh);\r\n\r\n    }\r\n    useEffect(() => {\r\n        let active = true;\r\n        (async () => {\r\n            setLoading(true);\r\n            setUpdate(true);\r\n            await UpdateTable(page, pagesize, localStorage.getItem(\"tokenClient\"));\r\n            await setLoading(false);\r\n            if (!active) {\r\n                return;\r\n            }\r\n        })();\r\n\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [page, items, pagesize, isrefresh]);\r\n    useEffect(() => {\r\n        if (props.typeuser === \"client\") {\r\n            setvisibleInterfaceDialog(true)\r\n        }\r\n    }, [])\r\n\r\n    const ChangeSizeColumn = (e) => {\r\n        let es = [e]\r\n        es.map((item, index) => {\r\n            if (item[index]) {\r\n                console.log()\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div id=\"Container\" style={{ height: 1000, width: \"80%\", margin: \"0px 10%\" }}>\r\n            <Button className={classes.BtnNewReport} onClick={() => isvisibleInterfaceDialog()} >Crear Ticket</Button>\r\n            <DataGrid onStateChange={(e) => {\r\n                ChangeSizeColumn(e.state.columns.lookup);\r\n\r\n            }} disableColumnMenu showToolbar disableDensitySelector paginationMode=\"server\"\r\n                page={page}\r\n                onPageChange={handlePageChange}\r\n                loading={loading}\r\n                pageSize={10} rows={items} columns={ilabels}\r\n                rowCount={countsrow}\r\n                rowHeight={85}\r\n                rowsPerPageOptions={[10, 20, 40]}\r\n                onPageSizeChange={handlepagresize}\r\n                className={classes.Tabla}\r\n            />;\r\n            {!visibleInterfaceDialog ? <></> :\r\n                <InterfaceDialog\r\n                    isadmin={props.isadmin}\r\n                    isopen={visibleInterfaceDialog}\r\n                    callback={isvisibleInterfaceDialog}\r\n                    id={id}\r\n                    refresh={refreshtable}\r\n                />}\r\n            {Result !== undefined ? visibleSuccess() : Result}\r\n            {props.typeuser === \"admin\" ?\r\n                <Dialog open={OpenComments}>\r\n                    <DialogTitle id=\"form-dialog-title\">Actualizar Status</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>Deje un comentario acerca del status actualizado.</DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"CommentStatus\"\r\n                            label=\"Comentario...\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleCloseComments} color=\"primary\">\r\n                            Cancelar\r\n          </Button>\r\n                        <Button onClick={handleSendStatus} color=\"primary\">\r\n                            Actualizar\r\n          </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                : null}\r\n\r\n        </div >\r\n    );\r\n\r\n}\r\n\r\nexport default ReportTable;","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\methodsTickets.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\FullReport\\fullReport.js",["176","177","178","179","180"],"import { Avatar, DialogContent, Divider, Grid, List, ListItem, ListItemAvatar, ListItemText, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport MethodsTickets from '../../services/Methods/methodsTickets';\r\nimport fullReportcss from './fullReport.css';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport CGetClient from '../../services/Methods/Clients/ClientService';\r\n\r\nexport default function FullReport(props) {\r\n    // use States\r\n    const [details, setDetails] = React.useState(null); // Detalles del reporte\r\n    const [ViewReport, isViewReport] = React.useState(true);\r\n    // Classes\r\n    const classes = fullReportcss(); //Styles\r\n    const getMethods = new MethodsTickets(); //Functions Tickets\r\n    const getClients = new CGetClient();\r\n    let Clients = [];\r\n    function formato(texto) {\r\n        return texto.replace(/^(\\d{4})-(\\d{2})-(\\d{2})$/g, '$3/$2/$1');\r\n    }\r\n    function ticketProps() {\r\n        if (ViewReport) {\r\n            getClients.getClients().then((res) =>\r\n                res.map((item) =>\r\n                    Clients.push(item.name)\r\n                )\r\n            ).then(\r\n                getMethods.getTikcet(props.id).then((res) => {\r\n                    console.log(res.ticket)\r\n                    setDetails(\r\n                        <>\r\n                            <div className={classes.Body}>\r\n                                <DialogContent dividers={true} className={classes.Description} >\r\n                                    <Grid container item spacing={0} xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                                        <Grid item xl={4} lg={4} md={4} sm={12} xs={12} >\r\n                                            <Typography variant=\"h5\" className={classes.Title}>Cliente: {res.ticket.client.name}</Typography>\r\n                                        </Grid>\r\n\r\n                                        <Divider />\r\n                                        <Grid item xl={4} lg={4} md={4} sm={12} xs={12} >\r\n                                            <Typography variant=\"h5\" className={classes.Title}>Titulo: {res.ticket.title}</Typography>\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                        <Grid item xl={4} lg={4} md={4} sm={12} xs={12} >\r\n                                            <Typography variant=\"h5\" className={classes.Status}>Status: {res.ticket.status.name}<FiberManualRecordIcon className={selectStatusbk(res.ticket.status.id)} /></Typography>\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                        <Grid item xl={4} lg={4} md={4} sm={12} xs={12} >\r\n                                            <Typography variant=\"h5\" className={classes.BodyTitle}>Creado: {formato((res.ticket.createdAt).substr(0, 10))}</Typography>\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                        <Grid item xl={4} lg={4} md={4} sm={12} xs={12} >\r\n                                            <Typography variant=\"h5\" className={classes.BodyTitle}>Ultima Actualización : {formato((res.ticket.updatedAt).substr(0, 10))}</Typography>\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                        <Grid item xl={4} lg={4} md={4} sm={12} xs={12} >\r\n                                            <Typography variant=\"h5\" className={classes.BodyTitle}>Proceso: {res.ticket.process}</Typography>\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                        <Grid item xl={12} lg={12} md={12} sm={12} xs={12} >\r\n                                            <Typography variant=\"h5\" className={classes.BodyTitle}>SubProceso: {res.ticket.subprocess}</Typography>\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                        <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                                            <Typography variant=\"h5\" className={classes.BodyTitle}>\r\n                                                Descripción: </Typography>\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                        <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                                            <DialogContent dividers={true} className={classes.Description} >\r\n                                                <Typography variant=\"body1\" paragraph>\r\n                                                    {res.ticket.description}\r\n                                                </Typography></DialogContent>\r\n                                        </Grid>\r\n                                        <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                                            <Typography variant=\"h5\" className={classes.BodyTitle}>\r\n                                                Archivo de Prueba: </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xl={12} lg={12} md={12} sm={12} xs={12}>\r\n                                            <Typography variant=\"h5\" className={classes.BodyTitle}>\r\n                                                Comentarios: </Typography>\r\n                                            <Typography variant=\"h5\" className={classes.BodyTitle}>\r\n                                                {res.ticket.comments} </Typography>\r\n                                            {console.log(res.ticket.comments)}\r\n                                        </Grid>\r\n                                        <Divider />\r\n                                    </Grid>\r\n                                </DialogContent>\r\n                            </div>\r\n                        </>);\r\n                }));\r\n            isViewReport(false);\r\n        } else { }\r\n        return details;\r\n    }\r\n\r\n    // const hanldeClickOpen = () => {\r\n    //     setOpen(true);\r\n    // }\r\n    const selectStatusbk = (idStatus) => {\r\n        switch (idStatus) {\r\n            case 1: {\r\n\r\n                return classes.green;\r\n            }\r\n            case 2: {\r\n                return classes.gray;\r\n            }\r\n            case 3: {\r\n                return classes.blue;\r\n            }\r\n            case 4: {\r\n                return classes.yellow;\r\n            }\r\n            default: {\r\n                return classes.white;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {ticketProps()}\r\n        </>\r\n    );\r\n}\r\n\r\n","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\newReport.js",["181","182"],"import { TextField, Select, MenuItem, InputLabel, FormControl, Button, DialogTitle, DialogContent, DialogContentText, DialogActions, Dialog, Grid } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport MethodsTickets from \"../../services/Methods/methodsTickets\";\r\nimport newReportcss from './newReport_css';\r\nimport Alerts from './Alerts/Alerts'\r\nimport CGetClients from \"../../services/Methods/Clients/ClientService\";\r\nimport MethodsProcess from '../../services/Methods/Procesos/methodsProces'\r\n\r\nexport default function NewReport(props) {\r\n\r\n    // const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [process, setProcess] = React.useState(\"Sin Elección\");\r\n    const [subprocess, setSubProcess] = React.useState(\"Sin Elección\");\r\n    const [errTitle, setErrTitle] = React.useState(false);\r\n    const [errProcess, setErrProcess] = React.useState(false);\r\n    const [clients, setClients] = React.useState([]);\r\n    const [client, setClient] = React.useState(\"\");\r\n    const [clientoken, setClientToken] = useState(\"\");\r\n    // Styles\r\n    const classes = newReportcss();\r\n    const postTicket = new MethodsTickets();\r\n    const getClients = new CGetClients();\r\n    const processclient = new MethodsProcess();\r\n    const [RowProcess, setRowProcess] = useState([\"\"]);\r\n    const [RowSubProcess, setRowSubProcess] = useState([\"\"]);\r\n    const [isVisibleDropSub, setVisbileDropSub] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        gclients();\r\n\r\n        if (props.isadmin) {\r\n\r\n        } else {\r\n            processclient.getAllProcess().then(res => {\r\n                setRowProcess(res.rows);\r\n                setLoading(false);\r\n            });\r\n        }\r\n    }, [loading]);\r\n\r\n\r\n    const gclients = () => {\r\n\r\n        Promise.resolve(getClients.getClients().then(res => { setClients(res); }))\r\n    }\r\n    const handleChangeProcess = (event) => {\r\n        setProcess(event.target.value);\r\n        setErrProcess(false);\r\n    };\r\n    const handleChangeSubProcess = (event) => {\r\n        setSubProcess(event.target.value);\r\n        setErrProcess(false);\r\n    };\r\n    const handleChangeClient = (event) => {\r\n        setClient(event.target.value);\r\n        setClientToken(event.target.name);\r\n        processclient.getAllProcess(event.target.name).then(res => {\r\n            setRowProcess(res.rows);\r\n            setLoading(false);\r\n        });\r\n        setErrProcess(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n\r\n    }, [isVisibleDropSub]);\r\n\r\n\r\n    const alertDialog = < Dialog open={props.alertopen} >\r\n        <DialogTitle className={classes.DialogWarning} id=\"alert-dialog-title\">{\"¿Cerrar ventana?\"}</DialogTitle>\r\n        <DialogContent className={classes.DialogWarning}>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n                Se borrara la información de los campos del formulario llenos.\r\n              </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions className={classes.DialogWarning}>\r\n            <Button className={classes.Btns} onClick={props.handleCancel()} color=\"primary\">\r\n                No\r\n              </Button>\r\n            <Button className={classes.Btns} onClick={() => props.callback()} color=\"primary\" autoFocus>\r\n                Si\r\n              </Button>\r\n        </DialogActions></Dialog >;\r\n\r\n    const resultpost = (res) => {\r\n        switch (res) {\r\n            case 1: {\r\n                props.callback(undefined, <Alerts isOpen={true} />);\r\n                props.refresh();\r\n                break;\r\n            }\r\n            case 2: {\r\n\r\n                break;\r\n            }\r\n            default: {\r\n\r\n            }\r\n        }\r\n    }\r\n    const checkFields = () => {\r\n        let titletxt = document.getElementById(\"Title\").value;\r\n        let descriptiontxt = document.getElementById(\"Description\").value;\r\n\r\n        if (titletxt === \"\") {\r\n            setErrTitle(true);\r\n        }\r\n        else if (process === \"Sin Elección\") {\r\n            setErrProcess(true)\r\n        }\r\n        else if (!errProcess && !errTitle) {\r\n            sendTicket(titletxt, descriptiontxt);\r\n        }\r\n    }\r\n\r\n    const sendTicket = (titletxt, descriptiontxt) => {\r\n        if (props.isadmin) {\r\n            postTicket.postTicket({ clientId: client, title: titletxt, process: process, subprocess: subprocess, description: descriptiontxt, statusCatalogId: 1, comments: \"\" }).then((res) => {\r\n                resultpost(res);\r\n            });\r\n        } else {\r\n\r\n            postTicket.postTicket({ clientId: parseInt(localStorage.getItem(\"ClientId\"), 10), title: titletxt, subprocess: subprocess, process: process, description: descriptiontxt, statusCatalogId: 1, comments: \"\" }).then((res) => {\r\n                resultpost(res);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    function ActivateSub(item) {\r\n        setRowSubProcess(item);\r\n        setVisbileDropSub(true);\r\n\r\n    }\r\n    return (\r\n        <div >\r\n            {props.isadmin ?\r\n\r\n                <FormControl className={classes.FormControl}>\r\n                    <InputLabel htmlFor=\"age-native-simple\">Seleccione el Cliente</InputLabel>\r\n                    <Select error={errProcess} required\r\n                        labelId=\"procesos-lbl\"\r\n                        id=\"procesos-id\"\r\n                        value={client}\r\n                        onChange={handleChangeClient}\r\n                        variant=\"outlined\"\r\n                        name={clientoken}\r\n                    >\r\n                        {clients.map((proceso) =>\r\n                            (<MenuItem key={proceso.id} value={proceso.id} name={proceso.token} >{proceso.name}</MenuItem>)\r\n                        )}\r\n                    </Select>\r\n                </FormControl> : null}\r\n\r\n            <TextField id=\"Title\" variant=\"outlined\" label=\"Titulo\" error={errTitle} required onChange={() => setErrTitle(false)} className={classes.TextField} />\r\n            <FormControl className={classes.FormControl}>\r\n                <InputLabel htmlFor=\"age-native-simple\" >Seleccione el Proceso</InputLabel>\r\n                <Select error={errProcess} required\r\n                    placeholder=\"Seleccionar Proceso\"\r\n                    labelId=\"procesos-lbl\"\r\n                    id=\"procesos-id\"\r\n                    value={process}\r\n                    onChange={handleChangeProcess}\r\n                    variant=\"outlined\"\r\n                >\r\n                    {RowProcess.map((proceso) => (\r\n                        <MenuItem key={proceso.id + proceso.name} onClick={() => ActivateSub(proceso.subproceso)} value={proceso.name} >{proceso.name}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            {isVisibleDropSub ?\r\n                <FormControl className={classes.FormControl}>\r\n                    <InputLabel htmlFor=\"age-native-simple\" >Seleccione el Subproceso</InputLabel>\r\n                    <Select error={errProcess} required\r\n                        placeholder=\"Seleccionar Proceso\"\r\n                        labelId=\"subprocesos-lbl\"\r\n                        id=\"subprocesos-id\"\r\n                        value={subprocess}\r\n                        onChange={handleChangeSubProcess}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        {RowSubProcess.map((proceso) => (\r\n                            <MenuItem key={proceso.id + proceso.name} value={proceso.name} >{proceso.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                : null}\r\n            <TextField id=\"Description\" label=\"Descripción\" multiline rows={8} variant=\"outlined\" className={classes.TextField} />\r\n            <FormControl className={classes.FormControl}>\r\n                <Button onClick={() => checkFields()} className={classes.SendBtn}>Enviar</Button>\r\n            </FormControl>\r\n            {alertDialog}\r\n        </div>\r\n    );\r\n\r\n}","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\InterfaceDialog\\interfaceDialog.js",["183"],"import React from 'react';\r\nimport { AppBar, Toolbar, IconButton, Typography, Dialog, Grid } from \"@material-ui/core\";\r\nimport { CloseIcon } from '@material-ui/data-grid';\r\nimport fullReportcss from '../FullReport/fullReport.css';\r\nimport FullReport from '../FullReport/fullReport'\r\nimport NewReport from '../NewReport/newReport';\r\n\r\nexport default function InterfaceDialog(props) {\r\n\r\n    const [open, isOpen] = React.useState(props.isopen);\r\n    const classes = fullReportcss();\r\n    const [alert, setAlert] = React.useState(false);\r\n    const handleClickClose = () => {\r\n        props.id !== undefined ? dialog() : setAlert(!alert);\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setAlert(!alert);\r\n    }\r\n\r\n    const dialog = (id, res) => {\r\n        isOpen(false);\r\n        props.callback(undefined, res);\r\n    }\r\n\r\n    let title = \"\";\r\n\r\n    const selectedDialog = () => {\r\n\r\n        switch (true) {\r\n            case props.id !== undefined: {\r\n                return (<FullReport id={props.id} isadmin={props.isadmin} />);\r\n            }\r\n            case props.id === undefined: {\r\n                return (<NewReport isadmin={props.isadmin} refresh={props.refresh} handleCancel={() => handleCancel} callback={dialog} alertopen={alert} />);\r\n            }\r\n            default: {\r\n                return <></>\r\n            }\r\n        }\r\n    }\r\n    const Title = () => {\r\n        if (props.id !== undefined) {\r\n            title = <Typography variant=\"h5\" className={classes.AppBarTitle}>Número de Ticket: #{props.id}</Typography>;\r\n        } else {\r\n            title = <Typography variant=\"h5\" className={classes.AppBarTitle}>Levantar reporte</Typography>;\r\n        }\r\n        return title;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog scroll=\"paper\" fullScreen open={open}>\r\n                <AppBar position=\"relative\"  >\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" onClick={() => handleClickClose()} className={classes.BtnClose} ><CloseIcon /> </IconButton>\r\n                        {Title()}\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {selectedDialog()}\r\n            </Dialog>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\Alerts\\Alerts.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Home\\home.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\validateClient.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginClient\\loginClient.js",["184"],"import { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport validateClient from '../../services/Methods/validateClient'\r\n\r\nfunction LoginClient(props) {\r\n    const { match: { params } } = props;\r\n    const [islogin, setlogin] = useState(false);\r\n    function checklogin() {\r\n        validateClient(0, 5, params.id);\r\n\r\n    }\r\n    useEffect(() => {\r\n        setlogin(localStorage.getItem(\"istokenClient\"))\r\n    }, [localStorage.getItem(\"istokenClient\")])\r\n\r\n    return (\r\n        <div>\r\n            {islogin ?\r\n                <Redirect to=\"/helper\" > </Redirect> : <div> {checklogin()} </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default LoginClient;","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Admin\\admin.js",["185","186"],"import React, { useState } from \"react\";\r\nimport NavBar from \"../../components/NavBar/navBar\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport ReportTable from \"../../components/ReportsTable/reportsTable\";\r\nimport { useEffect } from \"react\";\r\nimport CotizadorAdmin from \"../Cotizador/CotizadorAdmin/cotizadorAdmin\";\r\nimport { useAuthAdmin, useAuthLogin } from \"../PrivateRoutes/contexts/contextRoutes\";\r\nimport { Button, IconButton, makeStyles } from \"@material-ui/core\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nexport default function Admin() {\r\n    const useStyles = makeStyles({\r\n        list: {\r\n            width: 250,\r\n        },\r\n        fullList: {\r\n            width: 'auto',\r\n        },\r\n        btn: {\r\n            marginRight: \"40px\"\r\n        },\r\n        center: {\r\n            textAlign: \"center\"\r\n        },\r\n        closeSesion: {\r\n            position: \"absolute\",\r\n            right: \"30px\",\r\n            top: \"15px\",\r\n            backgroundColor: \"#6D8EEE\",\r\n            color: \"white\",\r\n            \"&:hover\": {\r\n                backgroundColor: \"white\",\r\n                color: \"#6D8EEE\"\r\n            }\r\n        }\r\n    });\r\n    const { setAuthTokensEmployes } = useAuthAdmin();\r\n    const { setAuthLogin } = useAuthLogin();\r\n    const [change, setChange] = useState(false);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        document.title = \"Administrador Inicio\"\r\n    })\r\n    useEffect(() => {\r\n    }, [change]);\r\n\r\n    const exit = () => {\r\n        setAuthTokensEmployes(false)\r\n        setAuthLogin(false);\r\n        localStorage.removeItem(\"isLogin\");\r\n        localStorage.removeItem(\"istokenEmployes\");\r\n        setChange(true);\r\n    }\r\n    return (\r\n        <> {!change ?\r\n            <>\r\n                <BrowserRouter>\r\n                    <NavBar title={\"Dashboard\"} tickets={\"/admin/tickets\"} cotizaciones={\"/admin/cotizaciones\"} logout={<Button onClick={() => exit()} className={classes.closeSesion}>Cerrar Sesión</Button>} sidebar>    </NavBar>\r\n                    <Switch>\r\n                        <Route exact path=\"/admin/tickets\" >\r\n                            <ReportTable isadmin typeuser=\"admin\" />\r\n                        </Route>\r\n                        <Route exact path=\"/admin/cotizaciones\">\r\n                            <CotizadorAdmin />\r\n                        </Route>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </> :\r\n            <Redirect to=\"/login\" />\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginEmployes\\loginEmployes.js",["187"],"import { Button, TextField } from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\nimport axios from \"../../axios/Config\"\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport NavBar from \"../../components/NavBar/navBar\";\r\nimport { useAuthAdmin, useAuthLogin } from \"../PrivateRoutes/contexts/contextRoutes\";\r\nimport useStyles from './loginEmployescss'\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nfunction LoginEmployed() {\r\n    const { setAuthTokensEmployes } = useAuthAdmin();\r\n    const { setAuthLogin } = useAuthLogin();\r\n    const [change, setchange] = useState(true)\r\n    const [errorUser, setErrorUser] = useState(false);\r\n    const [errorPass, setErrorPass] = useState(false);\r\n    const [invaliduser, setInvalidUser] = useState(null);\r\n    const classes = useStyles();\r\n\r\n    const checkFields = (e) => {  // Revisar si estan llenos los campos\r\n        const getuser = document.getElementById(\"user\").value;\r\n        const getpassword = document.getElementById(\"password\").value;\r\n        switch (true) {\r\n            case getuser === \"\" && getpassword === \"\":\r\n                setErrorPass(true);\r\n                setErrorUser(true);\r\n                break;\r\n            case getuser === \"\":\r\n                setErrorUser(true);\r\n                break;\r\n            case getpassword === \"\":\r\n                setErrorPass(true);\r\n                break;\r\n            default:\r\n                checklogin(getuser, getpassword)\r\n                break;\r\n        }\r\n\r\n    }\r\n    const CancelToken = Axios.CancelToken;\r\n    const source = CancelToken.source();\r\n    const checklogin = async (user, pass) => {  // Revisar si existe el usuario y contraseña\r\n        let params = {};\r\n        params[\"user\"] = user;\r\n        params[\"password\"] = pass;\r\n        params[\"page\"] = 0;\r\n        params[\"size\"] = 5;\r\n        await axios.get(\"/api/developer/\", { cancelToken: source.token, params }).then(res => {\r\n            if (res.data.dev.length) {\r\n                localStorage.setItem(\"tokenDeveloper\", user);\r\n                localStorage.setItem(\"iddeveloper\", res.data.dev[0].name);\r\n                setAuthTokensEmployes(true);\r\n                setAuthLogin(true)\r\n                setchange(false)\r\n            } else {\r\n                setInvalidUser(<Alert severity=\"error\">Error Usuario o contraseña incorrecto</Alert>)\r\n            }\r\n        }).catch(err => { console.log(err) });\r\n    }\r\n\r\n    useEffect(() => { // Ejecutar de nuevo el componente en caso que cambie el estado change\r\n        return () => {\r\n            source.cancel();\r\n        };\r\n    }, [change])\r\n\r\n\r\n    return (\r\n        <>{change ?\r\n            <>\r\n                <NavBar title=\"Iniciar Sesión\" />\r\n                <form className={classes.root} autoComplete=\"off\">\r\n\r\n                    <TextField error={errorUser} id=\"user\" required label=\"Usuario\" />\r\n                    <TextField error={errorPass} id=\"password\" onKeyDown={(e) => e.keyCode === 13 ? checkFields(e) : null} required label=\"Password\" />\r\n                    {invaliduser}\r\n                    <Button className={classes.btn} onClick={() => checkFields()}>Iniciar Sesión</Button >\r\n\r\n                </form>\r\n            </>\r\n            : <Redirect to=\"/admin/tickets\" />}\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default LoginEmployed;\r\n\r\n","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\LoginEmployes\\loginEmployescss.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\Cotizador.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorTable\\CotizadorTable.js",[],["188","189"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorAdmin\\cotizadorAdmin.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\sidebar\\sidebar.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\Cotizador\\CotizadorClient\\cotizadorclient.js",[],["190","191"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Description_Helper\\Des_Helper.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Description_Helper\\Des_helper_css.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\Axios\\Config.js",["192"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\contexts\\contextRoutes.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateadmin\\privateAdmin.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateHelper\\privateHelper.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\StatusCatalog\\StatusService.js",["193"],"import axios from '../../../axios/Config';\r\n\r\nfunction statusCatalog() {\r\n    let catalog = [];\r\n\r\n    axios.get(\"/api/statuscatalog/\").then(res => {\r\n        res.data.map((item, index) => { catalog.push(item) })\r\n    }).catch(err => { console.log(err) });\r\n    return catalog;\r\n}\r\n\r\n\r\nexport default statusCatalog;","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Faq_View\\Faqs_View.js",["194"],"import { Component } from \"react\";\r\nimport Des_helper_css from \"../Description_Helper/Des_helper_css\";\r\nimport Faqs from \"./Faqs/Faqs\";\r\n\r\n\r\nfunction Faq() {\r\n    const classes = Des_helper_css();\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <h3>Preguntas Frecuentes</h3>\r\n            <Faqs />\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Faq;\r\n","C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\Faq_View\\Faqs\\Faqs.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\components\\NavBar\\navBar_css.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\axios\\Config.js",["195","196"],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\Clients\\ClientService.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\FullReport\\fullReport.css.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\NewReport\\newReport_css.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\views\\PrivateRoutes\\privateLogin\\privateLogin.js",[],"C:\\Users\\ADN_01\\Documents\\Reactjs Proyectos\\systemtickets\\src\\services\\Methods\\Procesos\\methodsProces.js",[],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":3,"column":8,"nodeType":"203","messageId":"204","endLine":3,"endColumn":11},{"ruleId":"201","severity":1,"message":"205","line":9,"column":8,"nodeType":"203","messageId":"204","endLine":9,"endColumn":18},{"ruleId":"201","severity":1,"message":"206","line":134,"column":29,"nodeType":"203","messageId":"204","endLine":134,"endColumn":33},{"ruleId":"207","severity":1,"message":"208","line":220,"column":8,"nodeType":"209","endLine":220,"endColumn":42,"suggestions":"210"},{"ruleId":"207","severity":1,"message":"211","line":225,"column":8,"nodeType":"209","endLine":225,"endColumn":10,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":229,"column":30,"nodeType":"215","messageId":"216","endLine":229,"endColumn":32},{"ruleId":"201","severity":1,"message":"217","line":1,"column":10,"nodeType":"203","messageId":"204","endLine":1,"endColumn":16},{"ruleId":"201","severity":1,"message":"218","line":1,"column":48,"nodeType":"203","messageId":"204","endLine":1,"endColumn":52},{"ruleId":"201","severity":1,"message":"219","line":1,"column":54,"nodeType":"203","messageId":"204","endLine":1,"endColumn":62},{"ruleId":"201","severity":1,"message":"220","line":1,"column":64,"nodeType":"203","messageId":"204","endLine":1,"endColumn":78},{"ruleId":"201","severity":1,"message":"221","line":1,"column":80,"nodeType":"203","messageId":"204","endLine":1,"endColumn":92},{"ruleId":"201","severity":1,"message":"222","line":1,"column":142,"nodeType":"203","messageId":"204","endLine":1,"endColumn":146},{"ruleId":"207","severity":1,"message":"223","line":40,"column":8,"nodeType":"209","endLine":40,"endColumn":17,"suggestions":"224"},{"ruleId":"201","severity":1,"message":"222","line":2,"column":59,"nodeType":"203","messageId":"204","endLine":2,"endColumn":63},{"ruleId":"207","severity":1,"message":"225","line":15,"column":9,"nodeType":"226","endLine":15,"endColumn":46},{"ruleId":"201","severity":1,"message":"227","line":8,"column":18,"nodeType":"203","messageId":"204","endLine":8,"endColumn":28},{"ruleId":"201","severity":1,"message":"228","line":9,"column":8,"nodeType":"203","messageId":"204","endLine":9,"endColumn":21},{"ruleId":"207","severity":1,"message":"229","line":66,"column":8,"nodeType":"209","endLine":66,"endColumn":16,"suggestions":"230"},{"ruleId":"197","replacedBy":"231"},{"ruleId":"199","replacedBy":"232"},{"ruleId":"197","replacedBy":"233"},{"ruleId":"199","replacedBy":"234"},{"ruleId":"201","severity":1,"message":"235","line":6,"column":7,"nodeType":"203","messageId":"204","endLine":6,"endColumn":13},{"ruleId":"213","severity":1,"message":"214","line":7,"column":36,"nodeType":"215","messageId":"216","endLine":7,"endColumn":38},{"ruleId":"201","severity":1,"message":"236","line":1,"column":10,"nodeType":"203","messageId":"204","endLine":1,"endColumn":19},{"ruleId":"201","severity":1,"message":"237","line":5,"column":7,"nodeType":"203","messageId":"204","endLine":5,"endColumn":12},{"ruleId":"201","severity":1,"message":"235","line":6,"column":7,"nodeType":"203","messageId":"204","endLine":6,"endColumn":13},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"no-unused-vars","'Faq' is defined but never used.","Identifier","unusedVar","'Des_Helper' is defined but never used.","'cont' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'UpdateTable'. Either include it or remove the dependency array.","ArrayExpression",["240"],"React Hook useEffect has a missing dependency: 'props.typeuser'. Either include it or remove the dependency array.",["241"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Avatar' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemAvatar' is defined but never used.","'ListItemText' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'gclients', 'processclient', and 'props.isadmin'. Either include them or remove the dependency array.",["242"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'IconButton' is defined but never used.","'ExitToAppIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'source'. Either include it or remove the dependency array.",["243"],["238"],["239"],["238"],["239"],"'heroku' is assigned a value but never used.","'Component' is defined but never used.","'local' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},"Update the dependencies array to be: [page, items, pagesize, isrefresh, UpdateTable]",{"range":"252","text":"253"},"Update the dependencies array to be: [props.typeuser]",{"range":"254","text":"255"},"Update the dependencies array to be: [gclients, loading, processclient, props.isadmin]",{"range":"256","text":"257"},"Update the dependencies array to be: [change, source]",{"range":"258","text":"259"},[10536,10570],"[page, items, pagesize, isrefresh, UpdateTable]",[10704,10706],"[props.typeuser]",[1767,1776],"[gclients, loading, processclient, props.isadmin]",[2641,2649],"[change, source]"]